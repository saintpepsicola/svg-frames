{"version":3,"sources":["path.js","App.js","serviceWorker.js","index.js"],"names":["path","App","controls","useAnimation","controls2","React","useEffect","i_id","setInterval","start","bottom","right","scale","borderRadius","transition","duration","opacity","x","y","delay","clearInterval","className","svg","initial","width","height","d","animate","pathLength","translateX","translateY","fill","strokeWidth","stroke","strokeLinecap","strokeLinejoin","path2","rotate","path3","path4","path5","path6","circle","cx","cy","r","div","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8f2a29d.chunk.js","sourcesContent":["const path = \"M251.321 1.595 C 233.996 20.415,214.924 79.579,216.005 111.150 L 216.130 114.817 214.782 113.659 C 195.772 97.330,173.420 89.189,147.607 89.195 C 138.403 89.198,131.155 89.873,127.432 91.077 C 127.249 91.136,126.028 89.975,124.719 88.497 C 100.705 61.399,43.746 31.647,7.072 27.045 C -1.490 25.970,-1.270 25.648,3.343 32.489 C 25.476 65.313,72.503 100.880,101.888 107.020 C 103.389 107.334,104.678 107.637,104.752 107.693 C 104.825 107.750,103.820 109.197,102.517 110.909 C 99.402 115.005,90.907 131.886,88.361 139.043 C 85.789 146.269,83.563 150.526,78.847 157.234 C 71.075 168.289,69.981 175.009,73.603 189.421 C 74.183 191.730,74.691 193.846,74.731 194.123 C 74.772 194.400,75.052 195.188,75.354 195.875 C 75.656 196.562,75.903 197.223,75.903 197.344 C 75.903 198.065,80.295 208.478,82.219 212.322 L 84.504 216.883 78.240 216.706 C 54.444 216.032,38.584 227.542,38.551 245.508 C 38.527 258.878,49.974 273.177,63.056 276.117 C 64.026 276.335,64.819 276.637,64.819 276.787 C 64.819 276.938,58.990 293.954,51.865 314.601 C 44.740 335.248,38.620 353.350,38.265 354.828 C 35.541 366.186,39.215 378.555,47.208 384.933 C 49.245 386.559,49.238 386.593,46.683 387.410 C 41.735 388.992,30.878 394.258,26.761 397.072 C 22.759 399.809,21.676 401.239,22.549 402.637 C 22.818 403.068,22.829 403.435,22.585 403.871 C 21.773 405.320,23.414 406.708,25.960 406.728 C 26.737 406.734,27.665 406.960,28.024 407.232 C 29.912 408.660,72.910 403.391,79.341 400.944 C 82.489 399.745,84.608 397.315,84.627 394.878 C 84.633 394.124,84.786 393.955,85.457 393.955 C 85.910 393.955,92.362 393.426,99.796 392.779 C 107.229 392.133,113.934 391.604,114.696 391.604 C 115.457 391.604,126.574 393.563,139.400 395.957 C 152.226 398.352,165.703 400.717,169.349 401.214 L 175.978 402.118 175.799 403.326 C 175.584 404.771,176.396 406.522,177.735 407.504 C 178.384 407.979,182.304 408.921,191.409 410.790 C 206.620 413.911,206.027 413.766,217.464 417.192 C 230.006 420.949,233.267 421.538,234.761 420.316 C 235.038 420.089,235.943 419.818,236.772 419.713 C 238.819 419.453,240.460 417.113,239.159 416.309 C 238.992 416.205,238.936 415.518,239.035 414.781 C 239.490 411.383,222.729 400.030,209.740 394.938 C 208.631 394.503,207.682 394.125,207.630 394.097 C 207.578 394.068,208.409 393.129,209.477 392.009 C 216.906 384.220,218.150 371.967,213.144 355.919 C 212.614 354.223,212.465 353.318,212.715 353.321 C 212.926 353.323,217.473 354.608,222.820 356.176 C 228.167 357.743,232.883 359.026,233.300 359.026 C 234.283 359.026,234.196 359.688,235.434 342.753 C 236.001 335.003,236.526 328.601,236.601 328.526 C 236.676 328.451,240.260 329.451,244.565 330.747 L 252.393 333.103 253.099 332.378 C 253.487 331.980,258.765 323.115,264.828 312.678 C 270.890 302.242,275.874 293.666,275.903 293.621 C 275.931 293.576,291.869 298.223,311.320 303.948 C 330.771 309.673,346.954 314.358,347.281 314.358 C 347.629 314.358,352.003 309.977,357.761 303.862 C 363.197 298.090,374.856 286.269,383.670 277.593 C 397.167 264.308,399.679 261.689,399.596 260.992 C 399.293 258.466,376.606 249.322,355.668 243.286 C 330.025 235.894,314.502 233.126,285.978 230.857 C 263.868 229.099,266.037 229.438,266.992 227.893 C 267.870 226.472,267.745 226.484,271.480 227.447 C 275.537 228.493,275.743 228.259,274.835 223.642 C 274.685 222.882,274.797 222.740,275.687 222.562 C 277.345 222.231,277.941 220.994,277.334 219.150 C 276.782 217.473,276.844 217.296,277.989 217.296 C 280.228 217.296,280.891 214.989,279.448 212.219 L 278.810 210.995 280.457 210.776 C 283.986 210.308,283.102 208.252,277.415 203.694 C 273.744 200.753,273.641 200.545,274.558 197.913 C 275.653 194.770,274.592 194.363,266.433 194.791 C 250.217 195.643,236.838 199.075,227.757 204.713 L 226.296 205.621 226.517 202.306 C 227.183 192.356,227.623 189.694,231.642 171.285 L 234.831 156.675 234.663 150.462 L 234.494 144.249 236.267 141.394 C 255.045 111.162,266.136 30.098,255.201 3.010 C 253.799 -0.464,253.363 -0.622,251.321 1.595 M238.241 38.685 C 244.017 42.889,251.137 52.278,254.750 60.453 L 255.863 62.972 254.383 73.720 C 250.446 102.312,244.424 123.445,236.018 138.169 L 233.921 141.842 233.611 140.614 C 233.296 139.369,232.207 138.620,231.761 139.341 C 231.635 139.545,231.811 141.035,232.152 142.652 C 232.524 144.412,232.848 147.748,232.960 150.966 L 233.148 156.339 229.782 171.453 C 226.743 185.094,225.857 189.809,225.182 195.918 C 224.981 197.730,224.909 197.865,224.237 197.672 C 208.812 193.244,189.436 221.901,200.425 232.891 C 201.065 233.531,202.251 234.327,203.060 234.659 C 203.869 234.992,204.532 235.352,204.533 235.460 C 204.541 236.708,187.107 245.521,180.279 247.720 C 178.668 248.238,177.400 248.713,177.462 248.775 C 177.677 248.990,182.548 248.150,184.215 247.610 C 185.139 247.311,186.176 247.086,186.520 247.109 C 188.080 247.214,198.751 241.873,204.562 238.078 C 216.715 230.140,224.589 219.733,225.896 209.880 C 226.748 203.459,250.125 196.749,272.587 196.478 C 272.860 196.475,272.839 197.081,272.510 198.649 C 271.347 204.196,271.290 208.228,272.373 208.228 C 273.077 208.228,273.236 207.833,273.559 205.290 C 273.835 203.113,273.501 203.039,277.284 206.119 C 280.545 208.776,280.694 209.142,278.544 209.212 C 276.867 209.268,276.511 210.859,277.692 213.025 L 278.759 214.982 276.869 215.818 L 274.978 216.654 275.212 218.067 C 275.673 220.866,275.692 220.813,274.223 220.929 C 272.374 221.076,272.288 221.251,272.857 223.689 C 273.467 226.304,273.706 226.136,270.479 225.365 C 266.661 224.453,266.818 224.348,262.892 230.468 C 249.655 251.099,222.293 277.134,202.381 288.044 C 200.041 289.326,199.496 289.772,199.496 290.404 C 199.496 291.409,200.384 291.430,202.024 290.462 L 203.247 289.741 203.049 291.218 C 201.240 304.706,201.675 323.894,204.019 334.005 C 204.276 335.113,206.621 343.048,209.230 351.637 C 212.144 361.227,214.110 368.291,214.325 369.941 C 215.641 380.050,211.833 389.032,204.059 394.156 C 202.745 395.022,202.262 395.503,202.631 395.575 C 203.148 395.675,203.342 396.061,203.222 396.750 C 203.167 397.069,203.772 396.761,204.605 396.047 C 206.701 394.249,229.572 406.421,235.097 412.275 C 235.941 413.170,234.535 412.365,230.105 409.417 C 222.023 404.040,219.728 402.845,218.907 403.588 C 218.083 404.334,218.449 404.697,221.948 406.600 C 225.026 408.274,235.291 415.244,236.876 416.737 L 237.816 417.621 236.908 417.924 C 236.090 418.197,235.863 418.072,234.624 416.670 C 232.162 413.882,216.979 405.673,215.403 406.277 C 213.956 406.833,215.175 407.682,223.034 411.592 C 238.183 419.131,237.139 421.600,220.991 416.425 C 217.898 415.434,208.833 413.187,198.657 410.889 C 177.460 406.102,177.666 406.175,177.666 403.452 L 177.666 402.351 180.437 402.350 C 186.514 402.347,197.071 400.865,198.081 399.872 C 199.419 398.558,197.738 398.028,194.794 398.835 C 185.535 401.374,182.671 401.174,151.268 395.806 C 136.694 393.314,124.542 391.205,124.265 391.117 C 123.988 391.030,128.256 391.009,133.749 391.069 C 144.330 391.187,145.254 391.075,144.318 389.794 C 143.741 389.005,123.062 388.790,115.869 389.498 C 100.671 390.995,74.920 393.195,74.203 393.057 C 73.198 392.865,72.360 393.662,72.682 394.502 C 72.900 395.068,75.261 395.039,80.856 394.400 L 82.620 394.198 82.620 395.390 C 82.620 397.600,80.529 398.852,74.354 400.341 C 69.580 401.491,33.936 406.152,31.258 405.975 L 29.771 405.877 31.646 404.636 C 34.081 403.024,36.841 401.857,41.814 400.339 C 45.816 399.117,46.946 398.322,45.480 397.760 C 43.562 397.024,31.819 401.496,28.636 404.175 C 27.598 405.048,25.119 405.404,24.708 404.739 C 24.263 404.019,28.516 401.522,35.680 398.296 C 41.355 395.740,42.163 395.180,41.202 394.467 C 40.569 393.998,33.532 397.086,26.938 400.726 C 24.092 402.297,23.522 402.209,25.391 400.487 C 28.804 397.344,39.834 391.586,46.808 389.306 L 51.081 387.910 54.172 389.404 C 57.350 390.941,62.472 392.475,63.329 392.146 C 64.599 391.658,63.827 390.647,61.881 390.249 C 46.108 387.025,36.559 372.106,39.908 355.917 C 40.349 353.786,44.815 340.686,52.675 318.469 C 59.324 299.675,65.243 282.633,65.828 280.597 L 66.892 276.895 72.825 277.348 C 86.855 278.418,100.508 275.309,116.067 267.501 L 119.018 266.019 121.054 266.878 C 125.298 268.666,125.791 268.410,125.495 264.574 L 125.294 261.965 128.126 261.965 C 131.843 261.965,132.051 261.651,130.478 258.417 L 129.345 256.087 131.074 255.828 C 134.848 255.262,135.106 254.095,132.260 250.473 L 131.280 249.225 132.055 249.067 C 132.481 248.981,133.424 248.830,134.150 248.732 C 137.837 248.233,136.508 244.374,131.576 241.261 L 130.307 240.459 131.339 238.415 C 132.614 235.888,132.505 235.581,130.256 235.343 C 127.688 235.072,125.834 234.159,122.586 231.563 C 113.331 224.168,102.890 219.666,90.344 217.663 L 86.818 217.099 84.230 212.076 C 82.067 207.877,78.288 199.066,77.429 196.222 C 77.216 195.516,77.301 195.466,78.723 195.466 C 89.433 195.466,97.551 176.968,93.440 161.933 C 91.914 156.349,88.385 151.805,85.577 151.805 C 84.759 151.805,84.726 151.917,86.823 147.667 C 87.842 145.602,90.407 139.475,92.523 134.051 C 96.893 122.854,99.809 117.349,104.676 111.108 C 106.214 109.135,107.473 107.402,107.473 107.256 C 107.473 107.110,108.266 106.176,109.236 105.181 L 110.999 103.372 109.656 104.081 C 108.917 104.470,107.900 105.117,107.397 105.518 L 106.482 106.248 102.975 105.512 C 87.569 102.280,53.383 83.245,50.181 76.116 C 47.394 69.912,44.924 53.564,45.433 44.697 C 45.738 39.387,45.229 39.565,51.894 42.445 C 79.883 54.541,103.606 69.885,120.151 86.595 C 125.581 92.079,125.431 91.819,123.463 92.315 C 122.063 92.667,121.353 93.401,121.765 94.069 C 122.044 94.520,122.854 94.439,125.105 93.738 C 126.308 93.363,131.357 92.658,137.632 91.989 L 148.145 90.868 159.651 92.135 C 173.217 93.630,177.335 94.554,185.726 97.986 C 198.489 103.206,209.516 110.696,219.675 121.045 C 223.254 124.691,224.741 125.995,225.142 125.841 C 226.253 125.415,225.612 124.385,221.870 120.588 L 218.048 116.709 217.820 111.839 C 217.043 95.288,222.938 66.296,232.145 41.385 L 234.166 35.919 235.219 36.585 C 235.798 36.952,237.158 37.896,238.241 38.685 M113.653 131.294 C 99.501 134.725,101.119 155.685,115.533 155.654 C 126.820 155.630,133.046 141.119,125.000 133.593 C 122.014 130.800,118.571 130.102,113.653 131.294 M122.192 134.525 C 125.634 135.902,126.313 140.680,123.385 142.914 C 121.746 144.163,120.038 144.336,118.265 143.432 C 112.700 140.593,116.397 132.206,122.192 134.525 M86.195 154.131 C 88.681 155.260,90.779 158.637,91.845 163.224 C 95.102 177.235,88.353 192.812,78.646 193.692 L 76.697 193.869 75.961 191.392 C 71.814 177.422,72.672 170.168,79.741 159.446 C 83.959 153.048,83.906 153.092,86.195 154.131 M198.985 155.831 C 187.410 157.533,186.034 175.119,197.072 180.292 C 209.309 186.028,219.403 169.138,209.523 159.458 C 205.950 155.958,203.607 155.152,198.985 155.831 M203.226 158.715 C 205.806 160.503,206.013 164.000,203.672 166.268 C 200.910 168.946,195.784 166.851,195.684 163.004 C 195.578 158.940,199.957 156.449,203.226 158.715 M152.222 159.524 C 150.665 162.018,154.463 164.298,157.531 162.712 C 158.557 162.182,158.662 161.964,158.321 161.075 C 157.713 159.492,152.993 158.291,152.222 159.524 M124.601 168.148 C 124.601 168.940,126.157 171.496,126.996 172.083 C 127.696 172.574,127.698 172.622,127.279 179.012 C 126.049 197.783,128.046 215.852,132.120 222.803 C 139.605 235.576,157.215 222.652,173.028 192.779 C 174.055 190.840,175.236 188.401,175.654 187.360 C 176.392 185.523,176.457 185.463,177.877 185.303 C 179.752 185.091,181.921 183.548,181.336 182.842 C 180.890 182.305,179.818 182.209,179.527 182.681 C 179.421 182.853,178.537 183.172,177.563 183.390 C 173.274 184.350,167.563 181.524,158.077 173.748 C 152.584 169.245,154.070 169.511,142.607 170.977 C 131.225 172.432,128.806 172.107,126.736 168.850 C 125.900 167.534,124.601 167.107,124.601 168.148 M148.682 180.545 C 157.714 182.411,165.466 188.504,167.603 195.419 L 168.263 197.554 166.522 200.456 C 157.502 215.495,147.679 225.038,140.635 225.603 C 133.233 226.197,129.132 214.937,128.718 192.888 L 128.553 184.096 130.674 183.026 C 136.304 180.184,142.680 179.305,148.682 180.545 M223.735 199.523 L 224.968 199.844 224.809 202.441 C 224.019 215.351,219.642 223.728,209.245 232.234 C 206.608 234.392,206.666 234.382,204.006 233.124 C 195.377 229.041,198.049 214.762,209.348 204.577 C 214.781 199.679,218.849 198.250,223.735 199.523 M88.554 219.160 C 100.863 221.006,112.939 226.017,120.602 232.457 C 123.948 235.269,126.953 236.776,129.215 236.776 L 130.030 236.776 129.374 237.867 C 128.018 240.124,128.086 240.746,129.862 242.278 C 134.590 246.360,134.870 247.021,132.013 247.353 C 128.507 247.759,128.286 249.088,131.198 252.243 C 132.396 253.542,132.214 253.904,130.363 253.904 C 127.594 253.904,126.949 255.220,128.348 258.018 L 129.313 259.950 127.881 259.951 C 124.136 259.956,122.956 260.988,123.605 263.690 C 124.123 265.851,123.998 265.926,121.407 265.011 C 118.831 264.102,118.532 264.152,114.190 266.224 C 90.215 277.666,67.149 279.037,54.125 269.797 C 38.541 258.740,35.781 239.318,48.159 227.818 C 56.688 219.893,71.820 216.650,88.554 219.160 M286.976 232.760 C 310.322 234.448,317.811 235.617,340.890 241.174 C 361.906 246.235,383.435 253.752,394.907 260.036 L 397.371 261.385 389.514 269.316 C 385.192 273.677,373.863 285.153,364.338 294.817 L 347.019 312.387 311.438 301.954 C 291.869 296.215,275.641 291.526,275.376 291.533 C 275.100 291.541,270.129 299.741,263.720 310.761 C 257.574 321.328,252.410 330.190,252.245 330.453 C 251.996 330.850,250.564 330.511,243.845 328.462 C 236.831 326.322,235.682 326.056,235.272 326.472 C 234.757 326.995,234.661 327.886,233.235 345.424 C 232.739 351.520,232.286 356.559,232.228 356.623 C 232.170 356.687,227.511 355.402,221.874 353.768 L 211.626 350.798 209.591 344.780 C 208.472 341.471,207.606 338.714,207.666 338.653 C 207.726 338.593,210.409 339.373,213.627 340.387 C 216.846 341.400,219.665 342.230,219.893 342.231 C 220.666 342.235,220.690 340.714,220.009 334.837 C 217.946 317.029,216.516 303.271,216.708 303.079 C 216.828 302.959,222.171 303.871,228.580 305.106 C 240.890 307.479,240.565 307.461,240.978 305.793 C 241.070 305.424,243.802 292.130,247.049 276.251 L 252.953 247.380 259.008 239.225 L 265.062 231.069 266.788 231.247 C 267.737 231.345,276.822 232.026,286.976 232.760 M244.662 277.600 C 241.621 292.368,239.132 304.563,239.130 304.702 C 239.124 305.163,237.771 304.968,226.868 302.939 C 214.892 300.709,214.274 300.640,214.274 301.515 C 214.274 301.841,215.180 310.267,216.288 320.239 C 218.638 341.400,218.523 339.657,217.548 339.368 C 217.133 339.245,214.439 338.398,211.562 337.487 L 206.331 335.829 205.766 333.406 C 203.819 325.047,203.483 316.410,204.504 300.924 C 205.297 288.891,205.369 288.299,206.063 288.033 C 209.751 286.618,226.344 273.974,234.761 266.166 C 241.092 260.291,242.042 259.346,245.988 254.983 C 248.191 252.547,250.038 250.598,250.092 250.652 C 250.146 250.706,247.703 262.833,244.662 277.600\"\n\n\nexport default path","import React from 'react'\nimport './App.css'\nimport { motion, useAnimation } from 'framer-motion'\nimport path from './path'\n\nfunction App() {\n\n  const controls = useAnimation()\n  const controls2 = useAnimation()\n\n  React.useEffect(() => {\n    const i_id = setInterval(() => {\n      controls.start({\n        bottom: \"0%\",\n        right: \"0%\",\n        scale: 38,\n        borderRadius: '50%',\n        transition: { duration: 0.5 },\n      })\n      controls2.start({\n        opacity: '1',\n        x: 0, y: 0,\n        transition: { delay: 0.5, duration: 1 },\n      })\n    }, 6500)\n\n    return () => clearInterval(i_id)\n  }, [controls])\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <motion.svg\n          initial={false}\n          width=\"600\"\n          height=\"600\"\n        >\n\n          <motion.path\n            d={path}\n            animate={{\n              pathLength: [0, 0.5, 1],\n              opacity: [0, 1, 1, 1, 1, 1, 1, 0],\n              translateX: [0, 0, 0, 90],\n              translateY: [160, 160, 160, -60],\n              scale: [0.5, 0.5, 0.5, 0.2, 0.2],\n            }}\n\n            transition={{ duration: 4 }}\n            fill=\"transparent\"\n            strokeWidth=\"2\"\n            stroke=\"#fff\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n\n\n          <motion.path\n            d={path2}\n            transition={{ delay: 4, duration: 1.5 }}\n            animate={{\n              opacity: [0, 1],\n              rotate: [30, 0],\n              translateX: [900, 900, 900, 900, 0],\n              translateY: [700, 700, 700, 700, 0],\n            }}\n            fill='white'\n            strokeWidth=\"2\"\n            stroke=\"#fff\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n\n          <motion.path\n            d={path3}\n            transition={{ delay: 4.5, duration: 0.5 }}\n            animate={{\n              opacity: [0, 1],\n              pathLength: [0, 1]\n            }}\n            fill=\"transparent\"\n            strokeWidth=\"2\"\n            stroke=\"#fff\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n\n\n          <motion.path\n            d={path4}\n            transition={{ delay: 4.5, duration: 0.5 }}\n            animate={{\n              opacity: [0, 1],\n              pathLength: [0, 1]\n            }}\n            fill=\"transparent\"\n            strokeWidth=\"2\"\n            stroke=\"#fff\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n\n\n          <motion.path\n            d={path5}\n            transition={{ delay: 4.5, duration: 0.5 }}\n            animate={{\n              opacity: [0, 1],\n              pathLength: [0, 1]\n            }}\n            fill=\"transparent\"\n            strokeWidth=\"2\"\n            stroke=\"#fff\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n\n          <motion.path\n            d={path6}\n            transition={{ delay: 5.5, duration: 2.5 }}\n            animate={{\n              opacity: [0.2, 1],\n              pathLength: [0, 1]\n            }}\n            fill=\"transparent\"\n            strokeWidth=\"2\"\n            stroke=\"#fff\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n\n          <motion.circle\n            cx=\"276.5453715399724\" cy=\"153.63161222726774\" r=\"67.91250000000008\"\n            animate={{\n              opacity: [0, 1],\n              pathLength: [0, 1]\n            }}\n            transition={{ delay: 2.5, duration: 1 }}\n            fill=\"transparent\"\n            strokeWidth=\"2\"\n            stroke={'white'}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n\n        </motion.svg>\n\n        <motion.div\n          id='curtains'\n          animate={controls}\n        >\n\n        </motion.div>\n\n        <motion.div id='end' animate={controls2}>\n          The End <br />\n          <small> All graphics & animations were purely handwritten in code <br /> -Shiv </small>\n        </motion.div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n\n\nconst path2 = ' M 262.362 208.675 C 256.22 207.415 252.44 206.05 247.085 203.215 C 236.847 197.755 227.975 188.515 222.987 178.12 C 221.99 176.02 221.15 174.077 221.15 173.762 C 221.15 173.395 231.02 171.452 245.825 168.827 L 270.5 164.47 L 272.81 166.57 C 275.907 169.457 280.632 171.715 284.885 172.502 C 294.072 174.077 303.995 169.09 308.352 160.742 L 310.032 157.435 L 320.06 155.702 C 325.573 154.757 330.56 153.865 331.085 153.707 C 332.03 153.445 332.083 153.655 331.768 157.802 C 329.93 183.107 309.927 204.37 283.73 208.937 C 277.692 209.987 268.242 209.882 262.362 208.675 Z '\nconst path3 = 'M 267.921 144.406 C 268.603 140.783 271.491 135.848 274.693 132.698 C 281.413 126.136 290.338 124.036 298.318 127.133 C 300.628 128.078 299.683 128.288 296.113 127.658 C 290.286 126.608 282.621 128.918 277.896 133.013 C 275.323 135.271 271.963 140.416 271.281 143.251 C 270.861 144.826 270.388 145.561 269.601 145.771 C 267.711 146.296 267.553 146.138 267.921 144.406 Z '\nconst path4 = ' M 220 153.55 C 220.105 146.725 222.415 137.38 225.723 130.398 C 232.6 116.013 244.15 106.3 260.162 101.418 C 264.625 100.053 265.465 100 275.125 100 C 284.785 100 285.625 100.053 290.088 101.418 C 304.84 105.933 316.705 114.91 324.16 127.248 L 326.05 130.398 L 323.268 131.29 C 321.797 131.815 320.013 132.235 319.435 132.235 C 318.805 132.235 317.125 132.55 315.76 132.97 C 314.343 133.39 312.138 133.915 310.825 134.178 C 308.568 134.598 308.41 134.545 306.625 132.708 C 303.055 129.033 298.803 127.09 292.66 126.197 C 287.41 125.515 279.745 127.983 275.388 131.763 C 272.815 134.073 269.455 139.165 268.773 142.053 C 268.248 143.943 267.933 144.31 266.515 144.573 C 263.313 145.203 259.585 146.043 257.013 146.673 C 253.39 147.618 249.61 148.458 246.617 149.035 C 245.253 149.298 243.362 149.718 242.418 150.033 C 240.895 150.505 230.71 152.815 223.045 154.495 L 220 155.178 L 220 153.55 Z '\nconst path5 = ' M 284.832 164.102 C 282.207 163.42 278.637 161.11 277.062 159.01 C 275.067 156.385 274.227 153.865 274.175 150.347 C 274.175 144.677 276.747 140.215 281.63 137.537 C 285.305 135.49 291.08 135.332 294.44 137.117 C 299.952 140.057 302.577 144.257 302.577 150.137 C 302.577 157.855 297.012 163.892 289.452 164.365 C 287.825 164.47 285.778 164.312 284.832 164.102 Z '\nconst path6 = ' M 158.353 174.252 L 187.665 166.398 C 189.265 165.969 190.739 166.279 190.957 167.089 L 190.957 167.089 C 191.174 167.9 190.051 168.905 188.452 169.334 L 159.14 177.188 C 157.54 177.617 156.066 177.307 155.848 176.497 L 155.848 176.497 C 155.631 175.686 156.754 174.681 158.353 174.252 L 158.353 174.252 L 158.353 174.252 Z  M 171.878 196.946 L 188.319 192.541 C 189.553 192.21 190.732 192.599 190.949 193.41 L 190.949 193.41 C 191.166 194.22 190.34 195.146 189.106 195.477 L 172.665 199.882 C 171.43 200.213 170.252 199.824 170.035 199.013 L 170.035 199.013 C 169.818 198.203 170.643 197.277 171.878 196.946 L 171.878 196.946 L 171.878 196.946 Z  M 152.047 188.967 L 167.401 184.853 C 168.598 184.532 169.747 184.929 169.964 185.739 L 169.964 185.739 C 170.181 186.55 169.385 187.468 168.187 187.789 L 152.834 191.903 C 151.636 192.224 150.488 191.827 150.27 191.016 L 150.27 191.016 C 150.053 190.206 150.85 189.288 152.047 188.967 L 152.047 188.967 Z  M 179.615 182.681 L 198.921 177.508 C 199.974 177.226 200.945 177.43 201.088 177.963 L 201.088 177.963 C 201.231 178.497 200.492 179.159 199.439 179.442 L 180.133 184.615 C 179.079 184.897 178.108 184.693 177.965 184.159 L 177.965 184.159 C 177.822 183.626 178.561 182.963 179.615 182.681 Z '\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}